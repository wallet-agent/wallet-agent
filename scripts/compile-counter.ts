#!/usr/bin/env bun
import { readFileSync, writeFileSync } from "node:fs"
import { join } from "node:path"
import * as solc from "solc"

const CONTRACTS_DIR = "contracts"
const OUTPUT_DIR = "test/contracts"

function compileContract() {
  console.log("üî® Compiling Counter.sol...")

  // Read the contract source
  const contractPath = join(CONTRACTS_DIR, "Counter.sol")
  const source = readFileSync(contractPath, "utf8")

  // Create the input object for solc
  const input = {
    language: "Solidity",
    sources: {
      "Counter.sol": {
        content: source,
      },
    },
    settings: {
      outputSelection: {
        "*": {
          "*": ["abi", "evm.bytecode"],
        },
      },
    },
  }

  // Compile the contract
  const output = JSON.parse(solc.compile(JSON.stringify(input)))

  if (output.errors) {
    output.errors.forEach((error: { severity: string; formattedMessage: string }) => {
      if (error.severity === "error") {
        console.error("‚ùå Compilation error:", error.formattedMessage)
        process.exit(1)
      } else {
        console.warn("‚ö†Ô∏è Compilation warning:", error.formattedMessage)
      }
    })
  }

  const contract = output.contracts["Counter.sol"].Counter
  if (!contract) {
    console.error("‚ùå Contract not found in compilation output")
    process.exit(1)
  }

  console.log("‚úÖ Counter.sol compiled successfully!")

  // Generate the artifacts file
  const artifacts = `// Generated by compile-counter.ts
export const COUNTER_CONTRACT = {
  abi: ${JSON.stringify(contract.abi, null, 2)},
  bytecode: "0x${contract.evm.bytecode.object}",
} as const;
`

  // Write the artifacts
  const artifactsPath = join(OUTPUT_DIR, "counter-artifacts.ts")
  writeFileSync(artifactsPath, artifacts)
  console.log(`üìù Artifacts written to ${artifactsPath}`)

  // Generate the Wagmi config file
  const wagmiConfig = `// Generated Wagmi config for Counter contract
export const counterContract = {
  abi: ${JSON.stringify(contract.abi, null, 2)},
  address: {
    31337: "0x0000000000000000000000000000000000000000",
  },
} as const;
`

  const wagmiPath = join(OUTPUT_DIR, "wagmi-counter.ts")
  writeFileSync(wagmiPath, wagmiConfig)
  console.log(`üìù Wagmi config written to ${wagmiPath}`)

  return {
    abi: contract.abi,
    bytecode: `0x${contract.evm.bytecode.object}`,
  }
}

// Check if this script is being run directly
if (typeof import.meta !== "undefined" && import.meta.url === `file://${process.argv[1]}`) {
  try {
    compileContract()
    console.log("üéâ Compilation completed successfully!")
  } catch (error) {
    console.error("‚ùå Compilation failed:", error)
    process.exit(1)
  }
}

export { compileContract }
